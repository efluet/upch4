library(raster)
library(gridExtra)
library(latticeExtra)
library(grid)
library(ggplot2)
library(animation)
library(maptools)
library(animation)
library(rgdal)
library(here)
library(lubridate)
library(stringr)
# set wd
here()
#==============================================================================#
### make raster sum function (shorten) -----------------------------------------
#==============================================================================#
sum_raster <- function(raster){sum(cellStats(raster, stat="sum"))}
upscaled_stack_tg_month <- readRDS('../../output/results/upscaled_stack_tg_permonth.rds')
#
upscale_dates <- c(lapply(names(upscaled_stack_tg_month), function(x) parse_date_time(str_sub(x, -10, -1), 'ymd')))
upscale_dates <- do.call("c", upscale_dates)
###  Get LPJ   data              -----------------------------------------------
# read the netcdf
d <- '../../data/lpj_mmch4e/LPJ_mmch4e_2000-2017_MERRA2.nc'
# varname: mch4e
# var units: g CH4 /m2 /month
# time: "months since 1860-1-1 00:00:00"
# open netcdf file
e <- nc_open(d)
# get lpj times
lpj_time <- parse_date_time("1860-1-1", "ymd")  %m+% months(e$dim$time$vals)
# read wet fraction as raster brick
# subset the lpj rasters to those matching upscaled
mch4e <-brick(d, varname="mch4e")[[which(lpj_time %in% upscale_dates)]]
area_0.5_m2 <- area(mch4e) * 10e+6
mch4e_tg_month <- mch4e * area_0.5_m2 / 10e+9
tg_month_total <- data.frame()
for (i in seq(1, length(names(upscaled_stack_tg_month)))){
date = parse_date_time(str_sub(names(upscaled_stack_tg_month)[i], -10, -1),"ymd")
row <- data.frame(t= date,
upscaled_tg_tot = sum_raster(upscaled_stack_tg_month[[i]]),
lpj_tg_tot = sum_raster(mch4e_tg_month[[i]]))
tg_month_total <- rbind(tg_month_total, row)
}
tg_month_total
area_0.5_m2
mch4e_tg_month <- mch4e * area_0.5_m2 / 10e+12
tg_month_total <- data.frame()
for (i in seq(1, length(names(upscaled_stack_tg_month)))){
date = parse_date_time(str_sub(names(upscaled_stack_tg_month)[i], -10, -1),"ymd")
row <- data.frame(t= date,
upscaled_tg_tot = sum_raster(upscaled_stack_tg_month[[i]]),
lpj_tg_tot = sum_raster(mch4e_tg_month[[i]]))
tg_month_total <- rbind(tg_month_total, row)
}
tg_month_total
tg_month_total %>% gather(source, value, upscaled_tg_tot:lpj_tg_tot)
library(tidyr)
tg_month_total %>% gather(source, value, upscaled_tg_tot:lpj_tg_tot)
tg_month_total <- tg_month_total %>% gather(source, value, upscaled_tg_tot:lpj_tg_tot)
ggplot(tg_month_total) +
geom_line(aes(x=t, y=value, group=source))
ggplot(tg_month_total) +
geom_line(aes(x=t, y=value, color=source))
library(ggplot2)
# declare theme elements
custom_catch_trend_line_theme <- theme_bw() +
theme(text = element_text(size=7, colour='black'),
strip.text = element_text(size=7, face='bold'),
strip.background = element_blank(),
legend.background = element_blank(),
legend.key.size = unit(3, "mm"),
legend.text = element_text(size = 7),
legend.title=element_blank(),
#legend.position = c(0.8, 0.8),
legend.justification = "left",
legend.direction = 'vertical',
#axis.line = element_blank(),
axis.line = element_line(colour = "black", size=0.25),
axis.text = element_text(size=7, colour='black'),
axis.ticks = element_line(colour='black', size=0.2),
panel.grid = element_blank(),
#panel.border = element_rect(colour = "black", fill=NA, size=0.25),
panel.border = element_rect(colour = "black", size=0.25), # element_blank(),
panel.background = element_blank())
#legend.title = element_blank(),
#legend.background = element_rect(colour = NA),
#title.theme = element_blank(),
#legend.key = element_blank(),
#element_rect(colour = "black", size=0.2),
#element_text(size = 8),
ggplot(tg_month_total) +
geom_line(aes(x=t, y=value, color=source)) +
custom_catch_trend_line_theme
ggplot(tg_month_total) +
geom_line(aes(x=t, y=value, color=source)) +
custom_catch_trend_line_theme +
xlab("") + ylab("Global monthly CH4 emission (Tg / month")
getwd()
ggsave("../../output/figures/global_tg_monthly_2010_2012.png",
width=90, height=80, dpi=600, units='mm', type = "cairo-png")
ggplot(tg_month_total) +
geom_line(aes(x=t, y=value, color=source)) +
custom_catch_trend_line_theme +
theme(legend.position = "top") +
xlab("") + ylab("Global monthly CH4 emission (Tg / month")
ggsave("../../output/figures/global_tg_monthly_2010_2012.png",
width=90, height=80, dpi=600, units='mm', type = "cairo-png")
ggplot(tg_month_total) +
geom_line(aes(x=t, y=value, color=source)) +
custom_catch_trend_line_theme +
theme(legend.position = "top") +
scale_color_distiller(palette = "BlRd")+
xlab("") + ylab("Global monthly CH4 emission (Tg / month")
ggplot(tg_month_total) +
geom_line(aes(x=t, y=value, color=source)) +
custom_catch_trend_line_theme +
theme(legend.position = "top") +
scale_color_distiller(palette = "RdBl")+
xlab("") + ylab("Global monthly CH4 emission (Tg / month")
ggplot(tg_month_total) +
geom_line(aes(x=t, y=value, color=source)) +
custom_catch_trend_line_theme +
theme(legend.position = "top") +
#scale_color_distiller(palette = "RdBl")+
xlab("") + ylab("Global monthly CH4 emission (Tg / month")
library(ncdf4)
library(R.utils)
library(raster)
library(gridExtra)
library(latticeExtra)
library(grid)
library(ggplot2)
library(animation)
library(maptools)
library(animation)
library(rgdal)
library(here)
library(lubridate)
library(stringr)
# set wd
here()
source("./get_country_bbox_shp_for_ggplot_map.r")
#  get tower locations
bams_towers <- read.csv("../../data/towers/BAMS_site_coordinates.csv")
xy <- bams_towers[,c(3,4)]
bams_towers <- SpatialPointsDataFrame(coords = xy, data = bams_towers,
proj4string = crs(masked_flux_stack))
bams_towers <- data.frame(bams_towers)
# prep gif plottin theme         ----------------------------------------------------
gif_map_theme <- function(base_size=48){
theme_minimal() +
theme(legend.position=c(0.1, 0.4),
#legend.title = element_blank(),
legend.title=element_text(size=40),
legend.text=element_text(size=40),
plot.title = element_text(hjust = 0.5, face="bold", size = 40),
legend.key.size = unit(10, "mm"),
axis.line = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) }
masked_flux_stack <- readRDS('../../output/results/upscaled_stack_flux_g_m2_month.rds')
saveGIF({
# loop through hyde years ======================================================
for (t in 1:(length(names(masked_flux_stack)))){
# #  percentage wetland
flux <- as(masked_flux_stack[[t]], "SpatialPixelsDataFrame")
flux <- as.data.frame(flux)
names(flux) <- c("layer","x","y")
#flux <- flux[flux$layer > 0,]
#flux$layer <- flux$layer * 100
# # convert to discontinuous
# my_breaks = seq(0,400,50)
# flux$layer <- cut(flux$layer, breaks = my_breaks, dig.lab=10)
#
# # replace the categories stings to make them nicer in the legend
# flux$layer <- gsub("\\(|\\]", "", flux$layer)
# flux$layer <- gsub("\\,", "-", flux$layer)
wetplot <- ggplot() +
# background countries
geom_polygon(data=countries_wgs84_df, aes(long, lat, group=group) , fill="grey90") +
# Fw grid
geom_tile(data=flux, aes(x=x, y=y, fill=layer)) +
# country outlines
geom_path(data=countries_wgs84_df, aes(long, lat, group=group), color='black', size=0.01) +
# Tower sites
geom_point(data=bams_towers, aes(Longitude, Latitude), color='black', fill= "green", shape=21,  size=6) +
ggtitle(parse_date_time(str_sub(names(masked_flux_stack[[t]]),-10,-1), 'ymd')) +
#geom_text(aes(x=-50, y=-10)) +
labs(title = paste("CH4 emission", str_sub(names(masked_flux_stack[[t]]),-10,-1), 'ymd'),
#subtitle = "Uscaled from 35? eddy covariance flux towers",
caption = "Uscaled from eddy covariance flux towers.\nNote: only showing pixels with >1% wetland area")+
#x = "year", y = "team runs per game")
scale_x_continuous(limits=c(-180, 180))+
scale_y_continuous(limits=c(-60, 80))+
guides(fill = guide_legend(title = expression(paste("g m"^-2, " month"^-1)))) +
#guides(fill = guide_legend(title = expression(paste("nmols m"^-2, " s"^-1)))) +
guides(shape = guide_legend(override.aes = list(size = 10))) +
coord_equal() +
gif_map_theme() +
#scale_fill_gradient(low="yellow", high="red", limits=c(0, 15)) +
scale_fill_distiller(palette='YlOrRd', direction=1, limits=c(0, 15), breaks=seq(0,15,1))+
#labels=c(0,NA,NA,NA,NA,5,NA,NA,NA,NA,10,NA,NA,NA,NA,15)) +
#scale_fill_manual(values = colorRampPalette(brewer.pal(12, "YlOrRd"))(10), limits = c(0,400)) +
theme(legend.position=c(0.1, 0.3))
show(wetplot)
}
},  movie.name = "../../output/figures/gif/flux_upscale_v01_2yrs.gif", ani.width=2000, ani.height=1000, interval = 0.8, clean=TRUE)
dev.off()
library(ncdf4)
library(R.utils)
library(raster)
library(gridExtra)
library(latticeExtra)
library(grid)
library(ggplot2)
library(animation)
library(maptools)
library(animation)
library(lubridate)
library(stringr)
library(rgdal)
library(here)
here::here()
getwd()
r2 <- read.csv("../../data/r2/site_r2_all.csv")
r2
names(r2)
r2 <- read.csv("../../data/r2/site_r2_all.csv", stringsAsFactors = F) %>%
select(-SiteID2, -SiteID3, -SiteID4)
library(dplyr)
r2 <- read.csv("../../data/r2/site_r2_all.csv", stringsAsFactors = F) %>%
select(-SiteID2, -SiteID3, -SiteID4)
?gatherer
?gather
library(tidyr)
?gather
r2 <- read.csv("../../data/r2/site_r2_all.csv", stringsAsFactors = F) %>%
select(-SiteID2, -SiteID3, -SiteID4) %>%
gather(key="type", value="value")
glimpse(r2)
r2 <- read.csv("../../data/r2/site_r2_all.csv", stringsAsFactors = F) %>%
select(-SiteID2, -SiteID3, -SiteID4) %>%
group_by(SiteID) %>%
gather(key="type", value="value")
glimpse(r2)
r2 <- read.csv("../../data/r2/site_r2_all.csv", stringsAsFactors = F)
names(r2)
r2 <- read.csv("../../data/r2/site_r2_all.csv", stringsAsFactors = F) %>%
select(-SiteID2, -SiteID3, -SiteID4)
names(r2dtable())
names(r2)
r2 <- read.csv("../../data/r2/site_r2_all.csv", stringsAsFactors = F) %>%
select(-SiteID2, -SiteID3, -SiteID4) %>%
gather(key="type", value="value", SK_gapfillingR2:MG_wtd.variability.score)
names(r2)
ggplot(r2) + geom_bar(aes(x=SiteID, y=value, fill=type),
stat="identity", position="dodge")
ggplot(r2) +
geom_bar(aes(x=SiteID, y=value, fill=type), stat="identity", position="dodge") +
coord_flip()
ggplot(r2) +
geom_bar(aes(x=SiteID, y=value, fill=type), stat="identity", position="dodge") +
coord_flip() +
scale_x_discrete(expand=c(0,0.5))
View(r2)
r2 <- read.csv("../../data/r2/site_r2_all.csv", stringsAsFactors = F) %>%
select(-SiteID2, -SiteID3, -SiteID4) %>%
gather(key="type", value="value", SK_gapfillingR2:MG_wtd.variability.score) %>%
filter(SiteID != "")
ggplot(r2) +
geom_bar(aes(x=SiteID, y=value, fill=type), stat="identity", position="dodge") +
coord_flip() +
scale_x_discrete(expand=c(0,0.5))
ggplot(r2) +
geom_bar(aes(x=SiteID, y=value, fill=type), stat="identity", position="dodge") +
coord_flip() +
scale_y_discrete(expand=c(0,0.5))
ggplot(r2) +
geom_bar(aes(x=SiteID, y=value, fill=type), stat="identity", position="dodge") +
scale_x_discrete(expand=c(0,0.5)) +
coord_flip()
ggplot(r2) +
geom_bar(aes(x=SiteID, y=value, fill=type), stat="identity", position="dodge") +
scale_y_discrete(expand=c(0,0.5)) +
coord_flip()
ggplot(r2) +
geom_bar(aes(x=SiteID, y=value, fill=type), stat="identity", position="dodge") +
scale_y_discrete(expand=c(0,0)) +
coord_flip()
ggplot(r2) +
geom_bar(aes(x=SiteID, y=value, fill=type), stat="identity", position="dodge") +
scale_x_discrete(expand=c(0,0)) +
coord_flip()
ggplot(r2) +
geom_bar(aes(x=SiteID, y=value, fill=type), stat="identity", position="dodge") +
scale_x_discrete(expand=c(0,0)) +
coord_flip() +
xlab("")
ggplot(r2) +
geom_bar(aes(x=SiteID, y=value, fill=type), stat="identity", position="dodge") +
scale_y_discrete(expand=c(0,0)) +
coord_flip() +
xlab("")
ggplot(r2) +
geom_bar(aes(x=SiteID, y=value, fill=type), stat="identity", position="dodge") +
scale_x_discrete(expand=c(0.1,0.1)) +
coord_flip() +
xlab("")
ggplot(r2) +
geom_bar(aes(x=SiteID, y=value, fill=type), stat="identity", position="dodge") +
scale_x_discrete(expand=c(1,1)) +
coord_flip() +
xlab("")
ggplot(r2) +
geom_bar(aes(x=SiteID, y=value, fill=type), stat="identity", position="dodge") +
scale_x_discrete(expand=c(0.1, 0)) +
coord_flip() +
xlab("")
ggplot(r2) +
geom_bar(aes(x=SiteID, y=value, fill=type), stat="identity", position="dodge") +
scale_x_discrete(expand=c(0, 0.1)) +
coord_flip() +
xlab("")
ggplot(r2) +
geom_bar(aes(x=SiteID, y=value, fill=type), stat="identity", position="dodge") +
scale_x_discrete(limits= c(-0.5, 1.5)) +
coord_flip() +
xlab("")
ggplot(r2) +
geom_bar(aes(x=SiteID, y=value, fill=type), stat="identity", position="dodge") +
scale_y_discrete(limits= c(-0.5, 1.5)) +
coord_flip() +
xlab("")
ggplot(r2) +
geom_bar(aes(x=SiteID, y=value, fill=type), stat="identity", position="dodge") +
scale_x_continuous(limits= c(-0.5, 1.5)) +
coord_flip() +
xlab("")
ggplot(r2) +
geom_bar(aes(x=SiteID, y=value, fill=type), stat="identity", position="dodge") +
scale_y_continuous(limits= c(-0.5, 1.5)) +
coord_flip() +
xlab("")
ggplot(r2) +
geom_bar(aes(x=SiteID, y=value, fill=type), stat="identity", position="dodge") +
scale_y_continuous(limits= c(-0.1, 1.5)) +
coord_flip() +
xlab("")
names(r2d)
names(r2)
unique(r2$type)
r2 <- read.csv("../../data/r2/site_r2_all.csv", stringsAsFactors = F) %>%
select(-SiteID2, -SiteID3, -SiteID4) %>%
gather(key="type", value="value", SK_gapfillingR2:MG_wtd.variability.score) %>%
filter(SiteID != "") %>%
filter(! type %in% c("MG_variability.score", "MG_wtd.variability.score"))
ggplot(r2) +
geom_bar(aes(x=SiteID, y=value, fill=type), stat="identity", position="dodge") +
scale_y_continuous(limits= c(-0.1, 1.5)) +
coord_flip() +
xlab("") + ylab("R^2")
source("../plots/theme/line_plot_theme.r")
getwd()
line_plot_theme <-
theme_bw() +
theme(
### ALL TEXT (inherited everywhere)
text = element_text(size=3, colour='black'),
### FACET STRIP
strip.text = element_text(size=3, face='bold',hjust= 0, vjust = -0.5),
strip.background = element_blank(),
### LEGEND
legend.text = element_text(size = 3),
legend.background = element_blank(),
legend.key.size = unit(3, "mm"),
legend.title=element_blank(),
#legend.position = 'top',
legend.direction = 'vertical',
legend.justification = "left",
### AXES
axis.line  = element_blank(), #element_line(colour = "black", size=0.01),
axis.text  = element_text(size=3, colour='black'),
axis.ticks = element_line(colour='black', size=0.05),
### PANEL
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=0.08),
panel.background = element_rect(colour = "black", fill=NA, size=0.08)) #element_blank())
ggplot(r2) +
geom_bar(aes(x=SiteID, y=value, fill=type), stat="identity", position="dodge") +
scale_y_continuous(limits= c(-0.1, 1.5)) +
coord_flip() +
xlab("") + ylab("R^2") +
line_plot_theme
unique(r2$type)
r2 <- read.csv("../../data/r2/site_r2_all.csv", stringsAsFactors = F) %>%
select(-SiteID2, -SiteID3, -SiteID4) %>%
gather(key="type", value="value", SK_gapfillingR2:MG_wtd.variability.score) %>%
filter(SiteID != "") %>%
filter(! type %in% c("MG_variability.score", "MG_wtd.variability.score")) %>%
arrange(SK_gapfillingR2)
r2 <- read.csv("../../data/r2/site_r2_all.csv", stringsAsFactors = F) %>%
select(-SiteID2, -SiteID3, -SiteID4) %>%
gather(key="type", value="value", SK_gapfillingR2:MG_wtd.variability.score) %>%
filter(SiteID != "") %>%
filter(! type %in% c("MG_variability.score", "MG_wtd.variability.score")) %>%
sort(SK_gapfillingR2)
r2 <- read.csv("../../data/r2/site_r2_all.csv", stringsAsFactors = F) %>%
select(-SiteID2, -SiteID3, -SiteID4) %>%
gather(key="type", value="value", SK_gapfillingR2:MG_wtd.variability.score) %>%
filter(SiteID != "") %>%
filter(! type %in% c("MG_variability.score", "MG_wtd.variability.score")) %>%
sort(SK_gapfillingR2)
r2 <- read.csv("../../data/r2/site_r2_all.csv", stringsAsFactors = F) %>%
select(-SiteID2, -SiteID3, -SiteID4) %>%
gather(key="type", value="value", SK_gapfillingR2:MG_wtd.variability.score) %>%
filter(SiteID != "") %>%
filter(! type %in% c("MG_variability.score", "MG_wtd.variability.score")) %>%
arrange(SK_gapfillingR2)
r2 <- read.csv("../../data/r2/site_r2_all.csv", stringsAsFactors = F) %>%
select(-SiteID2, -SiteID3, -SiteID4)
r2l <-r2 %>%
gather(key="type", value="value", SK_gapfillingR2:MG_wtd.variability.score) %>%
filter(SiteID != "") %>%
filter(! type %in% c("MG_variability.score", "MG_wtd.variability.score")) %>%
arrange(SK_gapfillingR2)
r2 <- read.csv("../../data/r2/site_r2_all.csv", stringsAsFactors = F) %>%
select(-SiteID2, -SiteID3, -SiteID4) %>%
arrange(SK_gapfillingR2)
order_siteid <- as.factor(r2$SiteID)
r2l <-r2 %>%
gather(key="type", value="value", SK_gapfillingR2:MG_wtd.variability.score) %>%
filter(SiteID != "") %>%
filter(! type %in% c("MG_variability.score", "MG_wtd.variability.score"))
r2l$SiteID <- factor(r2l$SiteID, levels = factor(order_siteid))
order_siteid
order_siteid <- as.factor(unique(r2$SiteID))
order_siteid
View(r2)
r2 <- read.csv("../../data/r2/site_r2_all.csv", stringsAsFactors = F) %>%
select(-SiteID2, -SiteID3, -SiteID4) %>%
filter(SiteID != "") %>%
arrange(SK_gapfillingR2)
order_siteid <- as.factor(unique(r2$SiteID))
r2l <-r2 %>%
gather(key="type", value="value", SK_gapfillingR2:MG_wtd.variability.score) %>%
filter(SiteID != "") %>%
filter(! type %in% c("MG_variability.score", "MG_wtd.variability.score"))
r2l$SiteID <- factor(r2l$SiteID, levels = factor(order_siteid))
ggplot(r2) +
geom_bar(aes(x=SiteID, y=value, fill=type), stat="identity", position="dodge") +
scale_y_continuous(limits= c(-0.1, 1.5)) +
coord_flip() +
xlab("") + ylab("R^2") +
line_plot_theme
ggplot(r2l) +
geom_bar(aes(x=SiteID, y=value, fill=type), stat="identity", position="dodge") +
scale_y_continuous(limits= c(-0.1, 1.5)) +
coord_flip() +
xlab("") + ylab("R^2") +
line_plot_theme
ggsave("../../output/results/figures/barplot_all_r2_persite.png",
width=90, height=160, dpi=500, units="mm", type = "cairo-png")
dev.off()
getwd()
ggplot(r2l) +
geom_bar(aes(x=SiteID, y=value, fill=type), stat="identity", position="dodge") +
scale_y_continuous(limits= c(-0.1, 1.5)) +
coord_flip() +
xlab("") + ylab("R^2") +
line_plot_theme +
theme(legend)
ggsave("../../output/results/figures/barplot_all_r2_persite.png",
width=90, height=160, dpi=500, units="mm", type = "cairo-png")
dev.off()
ggsave("../../output/figures/barplot_all_r2_persite.png",
width=90, height=160, dpi=500, units="mm", type = "cairo-png")
dev.off()
# import libraries
library(raster)
library(dplyr)
library(tidyr)
library(ggplot2)
library(here)
here()
#===============================================================================
# List the files in the directory
l <- list.files(path = "../data/bioclim", pattern = ".tif", full.names = TRUE)
# Create empty stack, to which we'll append
bioclim_stack <- stack()
# Read raster, and add to stack.
s <- raster::stack(l)
# Crop the stack, to remove antarctica
aoi = extent(c(xmin=-180, xmax=180, ymin=-58, ymax=90))
s <- crop(s, aoi)
# reformat rasters  for graph in ggplot
sdf <- as.data.frame( as(s, "SpatialPixelsDataFrame") )
#===============================================================================
# Read in towers
towers <- read.csv("../data/towers/BAMS_site_coordinates.csv")
# get coordinates
pts_coords <- cbind(towers$Longitude, towers$Latitude)
# make spatial object
towers_pts <- SpatialPointsDataFrame(pts_coords, towers)
crs(towers_pts) <- crs(lst_day)
towers_pts_df <- data.frame(towers_pts)
library(here)
here()
